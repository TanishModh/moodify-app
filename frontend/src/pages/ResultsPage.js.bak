import React, { useState, useContext, useEffect } from "react";
import { useLocation } from "react-router-dom";
import {
  Box,
  Card,
  CardContent,
  CardMedia,
  CardActions,
  Typography,
  Paper,
  Button,
  CircularProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
} from "@mui/material";
import axios from "axios";
import { DarkModeContext } from "../context/DarkModeContext";
import { API_URL } from '../config';
import useMediaQuery from '@mui/material/useMediaQuery';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';

const ResultsPage = () => {
  const location = useLocation();
  const initialState = location.state || {};
  const initialEmotion = initialState.emotion || "None";
  const [selectedMood, setSelectedMood] = useState(initialEmotion);
  const [loading, setLoading] = useState(false);
  const [recommendationData, setRecommendationData] = useState({ music: [], movies: [], webseries: [], stories: [] });
  const { isDarkMode } = useContext(DarkModeContext);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [isAnimated, setIsAnimated] = useState(false);
  const isMobile = useMediaQuery('(max-width:600px)');

  const fetchRecommendations = async (mood) => {
    setLoading(true);
    try {
      console.log(`Fetching recommendations for mood: ${mood}`);
      const response = await axios.post(`${API_URL}/api/recommendations/`, { emotion: mood.toLowerCase() });
      console.log('API Response:', response.data);
      console.log('Recommendations:', response.data.recommendations);
      
      // Check if we have valid recommendations
      const recommendations = response.data.recommendations;
      if (recommendations) {
        console.log('Music items:', recommendations.music?.length || 0);
        console.log('Movies items:', recommendations.movies?.length || 0);
        console.log('Web Series items:', recommendations.webseries?.length || 0);
        console.log('Stories items:', recommendations.stories?.length || 0);
        setRecommendationData(recommendations);
      } else {
        console.error('No recommendations data in response');
        setRecommendationData({ music: [], movies: [], webseries: [], stories: [] });
      }
    } catch (error) {
      console.error("Error fetching recommendations:", error);
      setRecommendationData({ music: [], movies: [], webseries: [], stories: [] });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRecommendations(initialEmotion);
    // Add fade-in animation when component mounts
    setIsAnimated(true);
  }, []);

  const handleMoodChange = (event) => {
    const newMood = event.target.value;
    setSelectedMood(newMood);
    fetchRecommendations(newMood);
  };

  const handleCategorySelect = (category) => {
    setSelectedCategory(category);
  };
  
  const handlePlayPreview = (url) => {
    if (url) {
      window.open(url, '_blank');
    }
  };

  const styles = getStyles(isDarkMode); // Dynamically get styles based on dark mode

  return (
    <div style={{
      ...styles.container,
      opacity: isAnimated ? 1 : 0,
      transform: isAnimated ? 'translateY(0)' : 'translateY(20px)',
      transition: 'all 0.8s ease-in-out',
    }}>
      <Typography variant="h5" style={styles.emotionText}>
        <strong>
          Detected Mood:{" "}
          <span style={styles.emotion}>
            {selectedMood.charAt(0).toUpperCase() + selectedMood.slice(1)}
          </span>
        </strong>
      </Typography>

      {!initialState.isCheerUpMode && (
        <>
          <Typography
            variant="body2"
            style={{
              color: isDarkMode ? "#cccccc" : "#999",
              marginBottom: "20px",
              textAlign: "center",
              font: "inherit",
              fontSize: "14px"
            }}
          >
            Or select a mood from the dropdown below to get recommendations based on
            that mood:
          </Typography>

          {/* Dropdown to select mood */}
          <FormControl
            fullWidth
            style={{ marginBottom: "20px", maxWidth: "300px" }}
          >
            <InputLabel
              sx={{
                fontFamily: "Poppins",
                color: isDarkMode ? "#ffffff" : "#000000"
              }}
            >
              Select Mood
            </InputLabel>
            <Select
              value={selectedMood}
              onChange={handleMoodChange}
              variant="outlined"
              label="Select Mood"
              sx={{
                fontFamily: "Poppins",
                color: isDarkMode ? "#ffffff" : "#000000",
                ".MuiOutlinedInput-notchedOutline": {
                  fontFamily: "Poppins",
                  borderColor: isDarkMode ? "#ffffff" : "#000000"
                },
                "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                  fontFamily: "Poppins",
                  borderColor: isDarkMode ? "#ffffff" : "#000000"
                },
                ".MuiSvgIcon-root": {
                  fontFamily: "Poppins",
                  color: isDarkMode ? "#ffffff" : "#000000"
                }
              }}
            >
              {Object.keys(emotionToGenre).map((mood, index) => (
                <MenuItem
                  key={index}
                  value={mood}
                  style={{ fontFamily: "Poppins" }}
                >
                  {mood.charAt(0).toUpperCase() + mood.slice(1)}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </>
      )}

      <Paper style={styles.resultsContainer}>
        {selectedCategory === null ? (
          // Category selection grid
          <Box sx={{ 
            padding: '30px',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100%'
          }}>
            <Typography 
              variant="h5" 
              sx={{ 
                textAlign: 'center', 
                marginBottom: '40px', 
                color: isDarkMode ? 'rgba(255,255,255,0.95)' : 'rgba(0,0,0,0.85)',
                fontFamily: 'Poppins',
                fontWeight: 600,
                letterSpacing: '0.5px',
                position: 'relative',
                display: 'inline-block',
                '&:after': {
                  content: '""',
                  position: 'absolute',
                  width: '60px',
                  height: '3px',
                  background: 'linear-gradient(90deg, #6A1B9A 0%, #9C27B0 100%)',
                  bottom: '-12px',
                  left: '50%',
                  transform: 'translateX(-50%)',
                  borderRadius: '3px'
                }
              }}
            >
              What would you like recommendations for?
            </Typography>
            
            <Grid container spacing={4} justifyContent="center" sx={{ maxWidth: '1200px', margin: '0 auto' }}>
              <Grid item xs={12} sm={6} md={3}>
                <Button
                  onClick={() => handleCategorySelect('music')}
                  sx={{
                    width: '100%',
                    height: '180px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.15)' : 'rgba(106, 27, 154, 0.05)',
                    color: isDarkMode ? '#fff' : '#333',
                    borderRadius: '16px',
                    transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                    border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.3)' : 'rgba(106, 27, 154, 0.15)'}`,
                    overflow: 'hidden',
                    position: 'relative',
                    '&:before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '100%',
                      background: 'radial-gradient(circle at center, rgba(106, 27, 154, 0.2) 0%, rgba(106, 27, 154, 0) 70%)',
                      opacity: 0,
                      transition: 'opacity 0.3s ease',
                    },
                    '&:hover': {
                      backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.25)' : 'rgba(106, 27, 154, 0.1)',
                      transform: 'translateY(-8px) scale(1.03)',
                      boxShadow: '0 15px 30px rgba(106, 27, 154, 0.2)',
                      border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.6)' : 'rgba(106, 27, 154, 0.3)'}`,
                      '&:before': {
                        opacity: 1,
                      },
                    },
                  }}
                >
                  <Box 
                    sx={{ 
                      fontSize: '3.5rem', 
                      marginBottom: '16px',
                      background: 'linear-gradient(135deg, #6A1B9A 0%, #9C27B0 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                      filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))',
                    }}
                  >
                    ðŸŽµ
                  </Box>
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      fontWeight: 600,
                      letterSpacing: '0.5px',
                      background: isDarkMode ? 
                        'linear-gradient(135deg, #fff 0%, #e0e0e0 100%)' : 
                        'linear-gradient(135deg, #333 0%, #666 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                    }}
                  >
                    Music
                  </Typography>
                </Button>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Button
                  onClick={() => handleCategorySelect('movies')}
                  sx={{
                    width: '100%',
                    height: '180px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.15)' : 'rgba(106, 27, 154, 0.05)',
                    color: isDarkMode ? '#fff' : '#333',
                    borderRadius: '16px',
                    transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                    border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.3)' : 'rgba(106, 27, 154, 0.15)'}`,
                    overflow: 'hidden',
                    position: 'relative',
                    '&:before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '100%',
                      background: 'radial-gradient(circle at center, rgba(106, 27, 154, 0.2) 0%, rgba(106, 27, 154, 0) 70%)',
                      opacity: 0,
                      transition: 'opacity 0.3s ease',
                    },
                    '&:hover': {
                      backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.25)' : 'rgba(106, 27, 154, 0.1)',
                      transform: 'translateY(-8px) scale(1.03)',
                      boxShadow: '0 15px 30px rgba(106, 27, 154, 0.2)',
                      border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.6)' : 'rgba(106, 27, 154, 0.3)'}`,
                      '&:before': {
                        opacity: 1,
                      },
                    },
                  }}
                >
                  <Box 
                    sx={{ 
                      fontSize: '3.5rem', 
                      marginBottom: '16px',
                      background: 'linear-gradient(135deg, #6A1B9A 0%, #9C27B0 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                      filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))',
                    }}
                  >
                    ðŸŽ¬
                  </Box>
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      fontWeight: 600,
                      letterSpacing: '0.5px',
                      background: isDarkMode ? 
                        'linear-gradient(135deg, #fff 0%, #e0e0e0 100%)' : 
                        'linear-gradient(135deg, #333 0%, #666 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                    }}
                  >
                    Movies
                  </Typography>
                </Button>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Button
                  onClick={() => handleCategorySelect('webseries')}
                  sx={{
                    width: '100%',
                    height: '180px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.15)' : 'rgba(106, 27, 154, 0.05)',
                    color: isDarkMode ? '#fff' : '#333',
                    borderRadius: '16px',
                    transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                    border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.3)' : 'rgba(106, 27, 154, 0.15)'}`,
                    overflow: 'hidden',
                    position: 'relative',
                    '&:before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '100%',
                      background: 'radial-gradient(circle at center, rgba(106, 27, 154, 0.2) 0%, rgba(106, 27, 154, 0) 70%)',
                      opacity: 0,
                      transition: 'opacity 0.3s ease',
                    },
                    '&:hover': {
                      backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.25)' : 'rgba(106, 27, 154, 0.1)',
                      transform: 'translateY(-8px) scale(1.03)',
                      boxShadow: '0 15px 30px rgba(106, 27, 154, 0.2)',
                      border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.6)' : 'rgba(106, 27, 154, 0.3)'}`,
                      '&:before': {
                        opacity: 1,
                      },
                    },
                  }}
                >
                  <Box 
                    sx={{ 
                      fontSize: '3.5rem', 
                      marginBottom: '16px',
                      background: 'linear-gradient(135deg, #6A1B9A 0%, #9C27B0 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                      filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))',
                    }}
                  >
                    ðŸ“º
                  </Box>
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      fontWeight: 600,
                      letterSpacing: '0.5px',
                      background: isDarkMode ? 
                        'linear-gradient(135deg, #fff 0%, #e0e0e0 100%)' : 
                        'linear-gradient(135deg, #333 0%, #666 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                    }}
                  >
                    Web Series
                  </Typography>
                </Button>
              </Grid>
              
              <Grid item xs={12} sm={6} md={3}>
                <Button
                  onClick={() => handleCategorySelect('stories')}
                  sx={{
                    width: '100%',
                    height: '180px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.15)' : 'rgba(106, 27, 154, 0.05)',
                    color: isDarkMode ? '#fff' : '#333',
                    borderRadius: '16px',
                    transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                    border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.3)' : 'rgba(106, 27, 154, 0.15)'}`,
                    overflow: 'hidden',
                    position: 'relative',
                    '&:before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: '100%',
                      background: 'radial-gradient(circle at center, rgba(106, 27, 154, 0.2) 0%, rgba(106, 27, 154, 0) 70%)',
                      opacity: 0,
                      transition: 'opacity 0.3s ease',
                    },
                    '&:hover': {
                      backgroundColor: isDarkMode ? 'rgba(106, 27, 154, 0.25)' : 'rgba(106, 27, 154, 0.1)',
                      transform: 'translateY(-8px) scale(1.03)',
                      boxShadow: '0 15px 30px rgba(106, 27, 154, 0.2)',
                      border: `2px solid ${isDarkMode ? 'rgba(106, 27, 154, 0.6)' : 'rgba(106, 27, 154, 0.3)'}`,
                      '&:before': {
                        opacity: 1,
                      },
                    },
                  }}
                >
                  <Box 
                    sx={{ 
                      fontSize: '3.5rem', 
                      marginBottom: '16px',
                      background: 'linear-gradient(135deg, #6A1B9A 0%, #9C27B0 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                      filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))',
                    }}
                  >
                    ðŸ“š
                  </Box>
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      fontWeight: 600,
                      letterSpacing: '0.5px',
                      background: isDarkMode ? 
                        'linear-gradient(135deg, #fff 0%, #e0e0e0 100%)' : 
                        'linear-gradient(135deg, #333 0%, #666 100%)',
                      WebkitBackgroundClip: 'text',
                      WebkitTextFillColor: 'transparent',
                    }}
                  >
                    Short Stories
                  </Typography>
                </Button>
              </Grid>
            </Grid>
          </Box>
        ) : (
          // Show recommendations for the selected category
          <Box>
            {/* Header with back button */}
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center',
              padding: '20px 30px',
              borderBottom: isDarkMode ? '1px solid rgba(255,255,255,0.1)' : '1px solid rgba(0,0,0,0.1)',
            }}>
              <Typography 
                variant="h5" 
                sx={{ 
                  color: isDarkMode ? '#fff' : '#333',
                  fontWeight: 600,
                  position: 'relative',
                  paddingBottom: '8px',
                  '&:after': {
                    content: '""',
                    position: 'absolute',
                    bottom: 0,
                    left: 0,
                    width: '40px',
                    height: '3px',
                    background: 'linear-gradient(90deg, #6A1B9A 0%, #9C27B0 100%)',
                    borderRadius: '3px'
                  }
                }}
              >
                {selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)} Recommendations
              </Typography>
              <Button 
                onClick={() => setSelectedCategory(null)}
                variant="outlined"
                startIcon={<ArrowBackIcon />}
                sx={{ 
                  borderColor: isDarkMode ? 'rgba(106, 27, 154, 0.4)' : 'rgba(106, 27, 154, 0.3)',
                  color: isDarkMode ? 'rgba(255,255,255,0.9)' : 'rgba(0,0,0,0.8)',
                  borderRadius: '8px',
                  padding: '8px 16px',
                  fontWeight: 500,
                  letterSpacing: '0.5px',
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    borderColor: '#6A1B9A',
                    color: '#6A1B9A',
                    backgroundColor: 'rgba(106, 27, 154, 0.08)',
                    transform: 'translateY(-2px)',
                    boxShadow: '0 4px 8px rgba(106, 27, 154, 0.15)',
                  }
                }}
              >
                Back to Categories
              </Button>
            </Box>

            {/* Loading */}
            {loading && (
              <Box sx={{ 
                display: 'flex', 
                justifyContent: 'center', 
                alignItems: 'center',
                flexDirection: 'column',
                padding: '60px',
                height: '300px'
              }}>
                <CircularProgress sx={{ color: '#6A1B9A', marginBottom: '20px' }} />
                <Typography variant="body1" sx={{ color: isDarkMode ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.6)' }}>
                  Finding the perfect recommendations for you...
                </Typography>
              </Box>
            )}

            {/* Music Recommendations */}
            {selectedCategory === 'music' && recommendationData.music.length > 0 && !loading && (
              <Box sx={{ padding: '20px 0' }}>
                <Grid container spacing={4} sx={{ padding: '20px 30px' }}>
                  {recommendationData.music.map((track, index) => (
                    <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
                      <Card sx={{ 
                        height: '100%', 
                        display: 'flex', 
                        flexDirection: 'column',
                        backgroundColor: isDarkMode ? 'rgba(40, 40, 45, 0.9)' : '#fff',
                        color: isDarkMode ? '#fff' : '#333',
                        borderRadius: '16px',
                        overflow: 'hidden',
                        transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                        boxShadow: isDarkMode ? 
                          '0 8px 20px rgba(0, 0, 0, 0.3)' : 
                          '0 8px 20px rgba(0, 0, 0, 0.1)',
                        border: isDarkMode ? 
                          '1px solid rgba(255, 255, 255, 0.05)' : 
                          '1px solid rgba(0, 0, 0, 0.05)',
                        '&:hover': {
                          transform: 'translateY(-8px) scale(1.02)',
                          boxShadow: isDarkMode ? 
                            '0 15px 30px rgba(0, 0, 0, 0.4), 0 0 15px rgba(106, 27, 154, 0.3)' : 
                            '0 15px 30px rgba(0, 0, 0, 0.15), 0 0 15px rgba(106, 27, 154, 0.2)',
                        },
                      }}>
                        <CardMedia
                          component="img"
                          height="180"
                          image={track.image_url || 'https://via.placeholder.com/300x300?text=No+Image'}
                          alt={track.name}
                          sx={{
                            objectFit: 'cover',
                            transition: 'transform 0.5s ease',
                            '&:hover': {
                              transform: 'scale(1.05)',
                            }
                          }}
                        />
                        <CardContent sx={{ 
                          flexGrow: 1,
                          padding: '16px 20px',
                          position: 'relative',
                          '&:before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: '10%',
                            width: '80%',
                            height: '1px',
                            background: isDarkMode ? 
                              'linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.1) 50%, rgba(255,255,255,0) 100%)' : 
                              'linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.05) 50%, rgba(0,0,0,0) 100%)',
                          }
                        }}>
                          <Typography 
                            gutterBottom 
                            variant="h6" 
                            component="div"
                            sx={{
                              fontWeight: 600,
                              fontSize: '1.1rem',
                              lineHeight: 1.3,
                              marginBottom: '8px',
                              color: isDarkMode ? '#fff' : '#333',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              display: '-webkit-box',
                              WebkitLineClamp: 2,
                              WebkitBoxOrient: 'vertical',
                            }}
                          >
                            {track.name}
                          </Typography>
                          <Typography 
                            variant="body2" 
                            color={isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary'}
                            sx={{
                              fontWeight: 400,
                              marginBottom: '12px',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              display: '-webkit-box',
                              WebkitLineClamp: 2,
                              WebkitBoxOrient: 'vertical',
                            }}
                          >
                            {track.artist}
                          </Typography>
                        </CardContent>
                        <CardActions sx={{ 
                          padding: '0 16px 16px 16px',
                          justifyContent: 'space-between',
                        }}>
                          {track.preview_url && (
                            <Button 
                              size="small" 
                              sx={{
                                color: '#6A1B9A',
                                fontWeight: 500,
                                '&:hover': {
                                  backgroundColor: 'rgba(106, 27, 154, 0.08)',
                                }
                              }}
                              onClick={() => handlePlayPreview(track.preview_url)}
                              startIcon={<PlayArrowIcon />}
                            >
                              Preview
                            </Button>
                          )}
                          {track.external_url && (
                            <Button 
                              size="small" 
                              sx={{
                                color: '#6A1B9A',
                                fontWeight: 500,
                                '&:hover': {
                                  backgroundColor: 'rgba(106, 27, 154, 0.08)',
                                }
                              }}
                              onClick={() => window.open(track.external_url, '_blank')}
                              endIcon={<OpenInNewIcon />}
                            >
                              Spotify
                            </Button>
                          )}
                        </CardActions>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            )}

            {/* Movie Recommendations */}
            {selectedCategory === 'movies' && recommendationData.movies.length > 0 && !loading && (
              <Grid container spacing={4} sx={{ padding: '30px' }}>
                {recommendationData.movies.map((movie, index) => (
                  <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
                    <Card sx={{ 
                      height: '100%', 
                      display: 'flex', 
                      flexDirection: 'column',
                      backgroundColor: isDarkMode ? 'rgba(40, 40, 45, 0.9)' : '#fff',
                      color: isDarkMode ? '#fff' : '#333',
                      borderRadius: '12px',
                      overflow: 'hidden',
                      transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                      boxShadow: isDarkMode ? 
                        '0 8px 20px rgba(0, 0, 0, 0.3)' : 
                        '0 8px 20px rgba(0, 0, 0, 0.1)',
                      border: isDarkMode ? 
                        '1px solid rgba(255, 255, 255, 0.05)' : 
                        '1px solid rgba(0, 0, 0, 0.05)',
                      '&:hover': {
                        transform: 'translateY(-8px) scale(1.02)',
                        boxShadow: isDarkMode ? 
                          '0 15px 30px rgba(0, 0, 0, 0.4), 0 0 15px rgba(106, 27, 154, 0.3)' : 
                          '0 15px 30px rgba(0, 0, 0, 0.15), 0 0 15px rgba(106, 27, 154, 0.2)',
                      },
                    }}>
                      <CardMedia
                        component="img"
                        height="180"
                        image={movie.image || 'https://via.placeholder.com/300x300?text=No+Image'}
                        alt={movie.title}
                        sx={{
                          objectFit: 'cover',
                          transition: 'transform 0.5s ease',
                          '&:hover': {
                            transform: 'scale(1.05)',
                          }
                        }}
                      />
                      <CardContent sx={{ 
                        flexGrow: 1,
                        padding: '16px 20px',
                        position: 'relative',
                        '&:before': {
                          content: '""',
                          position: 'absolute',
                          top: 0,
                          left: '10%',
                          width: '80%',
                          height: '1px',
                          background: isDarkMode ? 
                            'linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.1) 50%, rgba(255,255,255,0) 100%)' : 
                            'linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.05) 50%, rgba(0,0,0,0) 100%)',
                        }
                      }}>
                        <Typography 
                          gutterBottom 
                          variant="h6" 
                          component="div"
                          sx={{
                            fontWeight: 600,
                            fontSize: '1.1rem',
                            lineHeight: 1.3,
                            marginBottom: '8px',
                            color: isDarkMode ? '#fff' : '#333',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            display: '-webkit-box',
                            WebkitLineClamp: 2,
                            WebkitBoxOrient: 'vertical',
                          }}
                        >
                          {movie.title}
                        </Typography>
                        <Typography 
                          variant="body2" 
                          color={isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary'}
                          sx={{
                            fontWeight: 400,
                            marginBottom: '12px',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            display: '-webkit-box',
                            WebkitLineClamp: 2,
                            WebkitBoxOrient: 'vertical',
                          }}
                        >
                          {movie.description}
                        </Typography>
                      </CardContent>
                      <CardActions sx={{ 
                        padding: '0 16px 16px 16px',
                        justifyContent: 'space-between',
                      }}>
                        <Button 
                          size="small" 
                          sx={{
                            color: '#6A1B9A',
                            fontWeight: 500,
                            '&:hover': {
                              backgroundColor: 'rgba(106, 27, 154, 0.08)',
                            }
                          }}
                          onClick={() => window.open(movie.external_url, '_blank')}
                          endIcon={<OpenInNewIcon />}
                        >
                          View Details
                        </Button>
                      </CardActions>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            )}

            {/* Movie Recommendations */}
            {selectedCategory === 'movies' && recommendationData.movies.length > 0 && !loading && (
              <Box sx={{ padding: '20px 0' }}>
                <Grid container spacing={4} sx={{ padding: '20px 30px' }}>
                  {recommendationData.movies.map((movie, index) => (
                    <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
                      <Card sx={{ 
                        height: '100%', 
                        display: 'flex', 
                        flexDirection: 'column',
                        backgroundColor: isDarkMode ? 'rgba(40, 40, 45, 0.9)' : '#fff',
                        color: isDarkMode ? '#fff' : '#333',
                        borderRadius: '16px',
                        overflow: 'hidden',
                        transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                        boxShadow: isDarkMode ? 
                          '0 8px 20px rgba(0, 0, 0, 0.3)' : 
                          '0 8px 20px rgba(0, 0, 0, 0.1)',
                        border: isDarkMode ? 
                          '1px solid rgba(255, 255, 255, 0.05)' : 
                          '1px solid rgba(0, 0, 0, 0.05)',
                        '&:hover': {
                          transform: 'translateY(-8px) scale(1.02)',
                          boxShadow: isDarkMode ? 
                            '0 15px 30px rgba(0, 0, 0, 0.4), 0 0 15px rgba(106, 27, 154, 0.3)' : 
                            '0 15px 30px rgba(0, 0, 0, 0.15), 0 0 15px rgba(106, 27, 154, 0.2)',
                        },
                      }}>
                        <CardMedia
                          component="img"
                          height="180"
                          image={movie.image_url || 'https://via.placeholder.com/300x300?text=No+Image'}
                          alt={movie.title}
                          sx={{
                            objectFit: 'cover',
                            transition: 'transform 0.5s ease',
                            '&:hover': {
                              transform: 'scale(1.05)',
                            }
                          }}
                        />
                        <CardContent sx={{ 
                          flexGrow: 1,
                          padding: '16px 20px',
                          position: 'relative',
                          '&:before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: '10%',
                            width: '80%',
                            height: '1px',
                            background: isDarkMode ? 
                              'linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.1) 50%, rgba(255,255,255,0) 100%)' : 
                              'linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.05) 50%, rgba(0,0,0,0) 100%)',
                          }
                        }}>
                          <Typography 
                            gutterBottom 
                            variant="h6" 
                            component="div"
                            sx={{
                              fontWeight: 600,
                              fontSize: '1.1rem',
                              lineHeight: 1.3,
                              marginBottom: '8px',
                              color: isDarkMode ? '#fff' : '#333',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              display: '-webkit-box',
                              WebkitLineClamp: 2,
                              WebkitBoxOrient: 'vertical',
                            }}
                          >
                            {movie.title}
                          </Typography>
                          <Typography 
                            variant="body2" 
                            color={isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary'}
                            sx={{
                              fontWeight: 400,
                              marginBottom: '12px',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              display: '-webkit-box',
                              WebkitLineClamp: 3,
                              WebkitBoxOrient: 'vertical',
                            }}
                          >
                            {movie.description}
                          </Typography>
                        </CardContent>
                        <CardActions sx={{ 
                          padding: '0 16px 16px 16px',
                          justifyContent: 'flex-end',
                        }}>
                          <Button 
                            size="small" 
                            sx={{
                              color: '#6A1B9A',
                              fontWeight: 500,
                              '&:hover': {
                                backgroundColor: 'rgba(106, 27, 154, 0.08)',
                              }
                            }}
                            onClick={() => window.open(movie.external_url, '_blank')}
                            endIcon={<OpenInNewIcon />}
                          >
                            View Details
                          </Button>
                        </CardActions>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            )}

            {/* Web Series Recommendations */}
            {selectedCategory === 'webseries' && recommendationData.webseries.length > 0 && !loading && (
              <Box sx={{ padding: '20px 0' }}>
                <Grid container spacing={4} sx={{ padding: '20px 30px' }}>
                  {recommendationData.webseries.map((series, index) => (
                    <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
                      <Card sx={{ 
                        height: '100%', 
                        display: 'flex', 
                        flexDirection: 'column',
                        backgroundColor: isDarkMode ? 'rgba(40, 40, 45, 0.9)' : '#fff',
                        color: isDarkMode ? '#fff' : '#333',
                        borderRadius: '16px',
                        overflow: 'hidden',
                        transition: 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                        boxShadow: isDarkMode ? 
                          '0 8px 20px rgba(0, 0, 0, 0.3)' : 
                          '0 8px 20px rgba(0, 0, 0, 0.1)',
                        border: isDarkMode ? 
                          '1px solid rgba(255, 255, 255, 0.05)' : 
                          '1px solid rgba(0, 0, 0, 0.05)',
                        '&:hover': {
                          transform: 'translateY(-8px) scale(1.02)',
                          boxShadow: isDarkMode ? 
                            '0 15px 30px rgba(0, 0, 0, 0.4), 0 0 15px rgba(106, 27, 154, 0.3)' : 
                            '0 15px 30px rgba(0, 0, 0, 0.15), 0 0 15px rgba(106, 27, 154, 0.2)',
                        },
                      }}>
                        <CardMedia
                          component="img"
                          height="180"
                          image={series.image_url || 'https://via.placeholder.com/300x300?text=No+Image'}
                          alt={series.title}
                          sx={{
                            objectFit: 'cover',
                            transition: 'transform 0.5s ease',
                            '&:hover': {
                              transform: 'scale(1.05)',
                            }
                          }}
                        />
                        <CardContent sx={{ 
                          flexGrow: 1,
                          padding: '16px 20px',
                          position: 'relative',
                          '&:before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: '10%',
                            width: '80%',
                            height: '1px',
                            background: isDarkMode ? 
                              'linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.1) 50%, rgba(255,255,255,0) 100%)' : 
                              'linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.05) 50%, rgba(0,0,0,0) 100%)',
                          }
                        }}>
                          <Typography 
                            gutterBottom 
                            variant="h6" 
                            component="div"
                            sx={{
                              fontWeight: 600,
                              fontSize: '1.1rem',
                              lineHeight: 1.3,
                              marginBottom: '8px',
                              color: isDarkMode ? '#fff' : '#333',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              display: '-webkit-box',
                              WebkitLineClamp: 2,
                              WebkitBoxOrient: 'vertical',
                            }}
                          >
                            {series.title}
                          </Typography>
                          <Typography 
                            variant="body2" 
                            color={isDarkMode ? 'rgba(255, 255, 255, 0.7)' : 'text.secondary'}
                            sx={{
                              fontWeight: 400,
                              marginBottom: '12px',
                              overflow: 'hidden',
                              textOverflow: 'ellipsis',
                              display: '-webkit-box',
                              WebkitLineClamp: 3,
                              WebkitBoxOrient: 'vertical',
                            }}
                          >
                            {series.description}
                          </Typography>
                        </CardContent>
                        <CardActions sx={{ 
                          padding: '0 16px 16px 16px',
                          justifyContent: 'flex-end',
                        }}>
                          <Button 
                            size="small" 
                            sx={{
                              color: '#6A1B9A',
                              fontWeight: 500,
                              '&:hover': {
                                backgroundColor: 'rgba(106, 27, 154, 0.08)',
                              }
                            }}
                            onClick={() => window.open(series.external_url, '_blank')}
                            endIcon={<OpenInNewIcon />}
                          >
                            View Details
                          </Button>
                        </CardActions>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </Box>
            )}
                  color: isDarkMode ? "#cccccc" : "#999",
                  marginTop: "20px",
                  textAlign: "center",
                  fontSize: "14px"
                }}
              >
                No recommendations available. Try again!
              </Typography>
            )}
          </Box>
        )}
      </Paper>
    </div>
  );
};

// Define the mood to genre mapping
const emotionToGenre = {
  joy: "hip-hop",
  happy: "happy",
  sad: "sad",
  angry: "metal",
  love: "romance",
  fear: "sad",
  neutral: "pop",
  calm: "chill",
  disgust: "blues",
  surprised: "party",
  surprise: "party",
  excited: "party",
  bored: "pop",
  tired: "chill",
  relaxed: "chill",
  stressed: "chill",
  anxious: "chill",
  depressed: "sad",
  lonely: "sad",
  energetic: "hip-hop",
  nostalgic: "pop",
  confused: "pop",
  frustrated: "metal",
  hopeful: "romance",
  proud: "hip-hop",
  guilty: "blues",
  jealous: "pop",
  ashamed: "blues",
  disappointed: "pop",
  neutral: "chill",
  insecure: "pop",
  embarassed: "blues",
  overwhelmed: "chill",
  amused: "party",
};

// Dynamically get styles based on dark mode
const getStyles = (isDarkMode) => ({
  container: {
    minHeight: "100vh",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: isDarkMode ? "#121212" : "#f9f9f9",
    fontFamily: "Poppins",
    padding: "20px",
    transition: "all 0.3s ease",
    overflowY: 'auto',
    WebkitOverflowScrolling: 'touch',
    msOverflowStyle: 'none',
    scrollbarWidth: 'none',
    '&::-webkit-scrollbar': {
      display: 'none'
    }
  },
  emotionText: {
    marginBottom: "15px",
    color: isDarkMode ? "#ffffff" : "#333",
    fontFamily: "Poppins",
  },
  emotion: {
    color: "#6A1B9A",
    fontWeight: "bold",
  },
  resultsContainer: {
    padding: "20px",
    borderRadius: "12px",
    width: "90%",
    maxWidth: "1000px",
    height: "650px",
    boxShadow: "0px 4px 20px rgba(0, 0, 0, 0.1)",
    backgroundColor: isDarkMode ? "#1f1f1f" : "white",
    overflowY: "auto",
    transition: "background-color 0.3s ease",
  },
  recommendationsList: {
    display: "flex",
    flexDirection: "column",
    gap: "15px",
    padding: "10px 0",
    alignItems: "center",
  },
  recommendationCard: {
    width: "100%",
    maxWidth: "800px",
    borderRadius: "10px",
    padding: "15px",
    boxShadow: "0px 2px 10px rgba(0, 0, 0, 0.15)",
    backgroundColor: isDarkMode ? "#333333" : "#ffffff",
    display: "flex",
    font: "inherit",
    flexDirection: "row",
    gap: "10px",
    transition: "background-color 0.3s ease",
  },
  cardContentContainer: {
    display: "flex",
    flexDirection: "row",
    width: "100%",
  },
  imageContainer: {
    flex: 1,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  },
  albumImage: {
    width: "100%",
    maxWidth: "150px",
    height: "auto",
    borderRadius: "10px",
    boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
  },
  cardDetails: {
    flex: 2,
    display: "flex",
    font: "inherit",
    flexDirection: "column",
    justifyContent: "center",
  },
  songTitle: {
    font: "inherit",
    fontSize: "1rem",
    fontWeight: "bold",
    color: isDarkMode ? "#ffffff" : "#333",
    marginBottom: "5px",
  },
  artistName: {
    font: "inherit",
    fontSize: "0.9rem",
    color: isDarkMode ? "#cccccc" : "#555",
    marginBottom: "8px",
  },
  audioPlayer: {
    width: "100%",
    marginTop: "10px",
    borderRadius: "5px",
  },
  spotifyButton: {
    marginTop: "10px",
    backgroundColor: "#1DB954",
    color: "#fff",
    textTransform: "none",
    font: "inherit",
    fontWeight: "normal",
    "&:hover": {
      backgroundColor: "#1ed760",
    },
    transition: "background-color 0.3s ease",
  },
});

export default ResultsPage;
